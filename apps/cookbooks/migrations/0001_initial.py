# Generated by Django 5.2.1 on 2025-05-27 18:38

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='URL')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название категории')),
                ('source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на категорию первоисточника')),
                ('description', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('type', models.CharField(choices=[('image', 'Изображение'), ('youtube', 'YouTube')], default='image', max_length=50, verbose_name='Тип медиа')),
                ('media_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('media_cloud_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в облаке')),
                ('media_local_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли категория')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['position', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CommentUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author_name', models.CharField(blank=True, max_length=100, verbose_name='Имя автора комментария')),
                ('nickname', models.CharField(max_length=100, unique=True, verbose_name='Псевдоним автора комментария')),
                ('picture_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('picture_local_link', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
            ],
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID хэштега')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Хэштег')),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID ингредиента')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название ингредиента')),
            ],
            options={
                'verbose_name': 'Ингредиент',
                'verbose_name_plural': 'Ингредиенты',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RecipeCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID рецепта')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='URL')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название рецепта')),
                ('source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на рецепт в первоисточнике')),
                ('description', models.TextField(blank=True, verbose_name='Краткое описание рецепта')),
                ('type', models.CharField(choices=[('image', 'Изображение'), ('youtube', 'YouTube')], default='image', max_length=50, verbose_name='Тип медиа')),
                ('media_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('media_cloud_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в облаке')),
                ('media_local_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли карточка рецепта')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('rating', models.FloatField(default=0.0, verbose_name='Средняя оценка рецепта')),
                ('comments_count', models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')),
                ('comments_anchor_url', models.URLField(blank=True, max_length=500, verbose_name='Якорная ссылка на комментарии')),
                ('has_video', models.BooleanField(default=False, verbose_name='Есть ли видео к рецепту')),
                ('is_vegetarian', models.BooleanField(default=False, verbose_name='Вегетарианский рецепт')),
                ('cooking_time', models.CharField(blank=True, max_length=100, verbose_name='Время приготовления (строка)')),
                ('author_name', models.CharField(blank=True, max_length=255, verbose_name='Имя автора рецепта')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации рецепта')),
            ],
            options={
                'verbose_name': 'Карточка рецепта',
                'verbose_name_plural': 'Карточки рецептов',
                'ordering': ['position', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Единицы измерения',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RecipeHashtags',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hashtag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cookbooks.hashtag')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Количество ингредиента')),
                ('original_amount', models.CharField(blank=True, max_length=50, null=True, verbose_name='Оригинальное количество')),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredient_recipes', to='cookbooks.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeScreen',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID рецепта')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='URL')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название рецепта')),
                ('source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на рецепт в первоисточнике')),
                ('description', models.TextField(blank=True, verbose_name='Описание рецепта')),
                ('type', models.CharField(choices=[('image', 'Изображение'), ('youtube', 'YouTube')], default='image', max_length=50, verbose_name='Тип медиа')),
                ('media_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('media_cloud_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в облаке')),
                ('media_local_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли карточка рецепта')),
                ('count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Количество порций')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('hashtags', models.ManyToManyField(through='cookbooks.RecipeHashtags', to='cookbooks.hashtag')),
                ('ingredients', models.ManyToManyField(through='cookbooks.RecipeIngredient', to='cookbooks.ingredient')),
                ('recipe_card', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='screen', to='cookbooks.recipecard', verbose_name='Карточка рецепта')),
            ],
            options={
                'verbose_name': 'Экран рецепта',
                'verbose_name_plural': 'Экраны рецептов',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='recipeingredient',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ingredients', to='cookbooks.recipescreen'),
        ),
        migrations.AddField(
            model_name='recipehashtags',
            name='recipe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cookbooks.recipescreen'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(verbose_name='Текст комментария')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('user_comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cookbooks.commentuser', verbose_name='Пользователь')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cookbooks.recipescreen', verbose_name='Рецепт')),
            ],
        ),
        migrations.CreateModel(
            name='SimilarRecipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('related_recipe_url', models.URLField(blank=True, max_length=500, verbose_name='URL похожего рецепта')),
                ('related_recipe_uuid', models.UUIDField(verbose_name='ID похожего рецепта')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_recipes', to='cookbooks.recipescreen', verbose_name='Исходный рецепт')),
            ],
            options={
                'verbose_name': 'Похожий рецепт',
                'verbose_name_plural': 'Похожие рецепты',
                'ordering': ['recipe'],
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=70, unique=True, verbose_name='URL')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название подкатегории')),
                ('source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на подкатегорию первоисточника')),
                ('description', models.TextField(blank=True, verbose_name='Краткое описание')),
                ('type', models.CharField(choices=[('image', 'Изображение'), ('youtube', 'YouTube')], default='image', max_length=50, verbose_name='Тип медиа')),
                ('media_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('media_cloud_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в облаке')),
                ('media_local_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна ли подкатегория')),
                ('position', models.PositiveIntegerField(default=0, verbose_name='Позиция в списке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='cookbooks.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Подкатегория',
                'verbose_name_plural': 'Подкатегории',
                'ordering': ['position', 'title'],
            },
        ),
        migrations.AddField(
            model_name='recipecard',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='cookbooks.subcategory', verbose_name='Подкатегория рецепта'),
        ),
        migrations.AddField(
            model_name='recipeingredient',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cookbooks.unit', verbose_name='Единица измерения'),
        ),
        migrations.CreateModel(
            name='RecipeStep',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID шага')),
                ('step_number', models.PositiveIntegerField(verbose_name='Номер шага')),
                ('description', models.TextField(verbose_name='Описание шага')),
                ('type', models.CharField(choices=[('image', 'Изображение'), ('youtube', 'YouTube')], default='image', max_length=50, verbose_name='Тип медиа')),
                ('media_source_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа из первоисточника')),
                ('media_cloud_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в облаке')),
                ('media_local_url', models.URLField(blank=True, max_length=500, verbose_name='Ссылка на медиа в Django (media/...)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='cookbooks.recipescreen', verbose_name='Рецепт')),
            ],
            options={
                'verbose_name': 'Шаг рецепта',
                'verbose_name_plural': 'Шаги рецепта',
                'ordering': ['recipe', 'step_number'],
                'unique_together': {('recipe', 'step_number')},
            },
        ),
    ]
